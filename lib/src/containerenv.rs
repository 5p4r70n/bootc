//! Helpers for parsing the `/run/.containerenv` file generated by podman.

use std::fs::File;
use std::io::{BufRead, BufReader};

use anyhow::{Context, Result};
use fn_error_context::context;

const PATH: &str = "/run/.containerenv";

#[derive(Debug, Default)]
pub(crate) struct ContainerExecutionInfo {
    pub(crate) engine: String,
    pub(crate) name: String,
    pub(crate) id: String,
    pub(crate) image: String,
    pub(crate) imageid: String,
}

/// Load and parse the `/run/.containerenv` file.
#[context("Parsing {PATH}")]
pub(crate) fn get_container_execution_info() -> Result<ContainerExecutionInfo> {
    let f = File::open(PATH)
        .with_context(|| format!("Opening {PATH}"))
        .map(BufReader::new)?;
    let mut r = ContainerExecutionInfo::default();
    for line in f.lines() {
        let line = line?;
        let line = line.trim();
        let (k, v) = if let Some(v) = line.split_once('=') {
            v
        } else {
            continue;
        };
        // Assuming there's no quotes here
        let v = v.trim_start_matches('"').trim_end_matches('"');
        match k {
            "engine" => r.engine = v.to_string(),
            "name" => r.name = v.to_string(),
            "id" => r.id = v.to_string(),
            "image" => r.image = v.to_string(),
            "imageid" => r.imageid = v.to_string(),
            _ => {}
        }
    }
    Ok(r)
}
